@using sidekick
@using sidekick.testing.Models

@model LoginViewModel

@{
    ViewBag.Title = "Home Page";
}

<h2>Progress Bar</h2>
@Html.BuildProgressBar(new ProgressBar(60).Label("60%")).AddStack(new ProgressBar(20, Colors.Success).Label("20%").Striped(true))

<h2>Button Dropdown</h2>
@using (Html.Begin(new ButtonDropdown().Title("My Menu", "fa fa-edit")))
{
    <li>
        <a href="#">Report 1</a>
    </li>
    <li>
        <a href="#">Report 2</a>
    </li>
    <li>
        <a href="#">Report 3</a>
    </li>
}

<h2>Icons</h2>
@Html.Begin(new Icon("fa fa-square-o").Stacked("fa fa-twitter"))
@Html.Begin(new Icon("fa fa-circle-o fa-stack-2x").StackedText("1"))
@Html.Begin(new Icon("fa fa-edit fa-2x"))

<hr />

<h2>Breadcrumbs</h2>
@using (var breadcrumbs = Html.BeginBreadcrumbs())
{
    @breadcrumbs.AddCrumb(Url.Action("Index", "Home"), "Home")
    @breadcrumbs.AddCrumb(Url.Action("About", "Home"), "Page 2", true)
}

<hr />

<h2>Alerts</h2>
@using (Html.Begin(new Alert(AlertType.Danger).Heading("Uh Oh!").Dismissible()))
{
    <p>There was an error on the page</p>
}

@using (var alert = Html.Begin(new Alert(AlertType.Success).Heading("Good Job!")))
{
    @alert.WriteBody()
}

<hr />

<h2>Modals</h2>
<button id="modal-button" class="btn btn-default">Open Modal</button>
@using (var modal = Html.Begin(new Modal("test-modal").Title("My Modal", "fa fa-edit").SubmitButton("Submit", "fa fa-check")))
{
    using (Html.BeginForm())
    {
        using (modal.BeginBody().HasFooter())
        {
            <p>
                Modal content
            </p>
        }
    }
}

<hr />

<h2>Panels</h2>
@using (var panel = Html.Begin(new Panel(Colors.Info)))
{
    using (panel.BeginHeading())
    {
        <h2 class="panel-title">
            <i class="fa fa-truck"></i>
            My Panel
            <span class="pull-right">
                @Html.BuildActionLink("", "", "Add").Icon("fa fa-plus")
            </span>
        </h2>
    }

    using (panel.BeginBody())
    {
        <p>
            Panel content
        </p>
    }

    <table class="table">
        <thead>
            <tr>
                <th>First</th>
                <th>Last</th>
                <th>DOB</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Justin</td>
                <td>Wilcox</td>
                <td>12/24/1989</td>
            </tr>
        </tbody>
    </table>

    using (panel.BeginFooter())
    {
        <p>
            This is the footer
        </p>
    }
}

@using (var panel = Html.Begin(new Panel()))
{
    using (panel.BeginBody())
    {
        <p>Basic panel body</p>
    }
}

<hr />

<h2>Tabs</h2>
@using (var tabs = Html.Begin(TabType.Tabs, stacked: false, justified: true, fade: true))
{
    @tabs.Tab(new Tab("Baseball", "fa fa-user", "baseball", true))
    @tabs.Tab(new Tab("Football", "fa fa-truck", "football"))
    @tabs.Tab(new Tab("Soccer", "fa fa-truck", "soccer"))
    @tabs.Tab(new Tab("Tennis", "fa fa-truck", "tennis"))
    @tabs.Tab(new Tab("Swimming", "fa fa-truck", "swimming"))

    using (var dd = tabs.BeginTabDropdown(new Tab("Dropdown", "fa fa-star", "dropdown")))
    {
        @dd.Option(new Tab("Option 1", "fa fa-phone", "option1"))
        @dd.Option(new Tab("Option 2", "", "option2"))
    }

    using (tabs.BeginTab())
    {
        <p>The baseball tab</p>
    }

    using (tabs.BeginTab())
    {
        <p>The football tab</p>
    }

    using (tabs.BeginTab())
    {
        <p>The soccer tab</p>
    }

    using (tabs.BeginTab())
    {
        <p>The tennis tab</p>
    }

    using (tabs.BeginTab())
    {
        <p>The swimming tab</p>
    }

    using (tabs.BeginTab("option1"))
    {
        <p>Option 1</p>
    }

    using (tabs.BeginTab("option2"))
    {
        <p>Option 2</p>
    }
}

<hr />

<h2>Accordian</h2>
@using (var accordion = Html.Begin(new Accordion("test-accordion")))
{
    using (accordion.BeginPanel(new Panel("1"), "Section 1", ""))
    {
        <p>The content for the first section </p>
    }

    using (accordion.BeginPanel(new Panel("2", Colors.Danger), "Section 2", ""))
    {
        <p>The content for second section</p>
    }

    using (accordion.BeginPanel(new Panel("3", Colors.Success), "Section 3", ""))
    {
        <p>The content for third section</p>
    }
}

<hr />

<h2>Input Groups</h2>
@Html.InputGroupFor(x => x.Email).HtmlAttributes(new { @placeholder = "Email Address..." }).PrependIcon("fa fa-envelope").HasLabel(":").HasValidation()
@Html.InputGroupFor(x => x.Email, SelectListUtils.BuildSelectList(new CustomSelectList("Option 1", "Option 1").Add("Option 2", "Option 2")), "---Select One---").HasLabel(":")

<h2>Datetimepicker</h2>
@Html.InputGroupFor(x => x.Email).AppendIcon("fa fa-calendar").DatetimepickerClass("datetimepicker").HasLabel().IsRequired()

<h2>Form Groups</h2>
@Html.FormGroupFor(x => x.Email, ControlType.Textbox).HtmlAttributes(new { @placeholder = "Email Address..." }).IsRequired().HelpText("This is the help text")

<h2>Textarea</h2>
@Html.FormGroupFor(x => x.Email, ControlType.TextArea).HtmlAttributes(new { @placeholder = "Enter text..." }).Rows(10).Columns(4).HelpText("This is the help text section")

<h2>Dropdowns</h2>
@Html.FormGroupFor(x => x.Email, SelectListUtils.YesNoDropdown(), "--Select One--").HasLabel()
<br />
@Html.FormGroupFor(x => x.Email, SelectListUtils.BuildSelectList(new CustomSelectList("Option 1", "1").Add("Option 2", "2")), "--Select One--")

<h2>Checkbox</h2>
@Html.BuildCheckBoxFor(x => x.RememberMe, CheckboxType.Checkbox).HasLabel(":").IsRequired()

<h2>Links</h2>
<div class="form-gorup">
    @Html.BuildActionLink("Home", "Index", "Go Home").Icon("fa fa-home").HtmlAttributes(new { @class = "btn btn-primary" }).RouteValues(new { @id = 50 })
    @Ajax.BuildActionLink("Home", "Index", "Test Link").HtmlAttributes(new { @class = "btn btn-success" }).Icon("fa fa-check")
</div>

<h2>Validation Tests</h2>
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    @Html.FormGroupFor(x => x.Email, ControlType.Textbox).HtmlAttributes(new { @placeholder = "Enter email..." }).HasLabel(":")
    @Html.FormGroupFor(x => x.Password, ControlType.Password).HtmlAttributes(new { @placeholder = "Enter password..." }).HasLabel(":")
    @Html.InputGroupFor(x => x.NoFutureDate).AppendIcon("fa fa-calendar").DatetimepickerClass("datetimepicker").HasLabel(":").HasValidation()
    @Html.InputGroupFor(x => x.NoPastDate).AppendIcon("fa fa-calendar").DatetimepickerClass("datetimepicker").HasLabel(":").HasValidation()
    @Html.BuildCheckBoxFor(x => x.RememberMe, CheckboxType.Checkbox).HasLabel().IsRequired()

    <div class="well">
        <button type="submit" class="btn btn-success">Submit</button>
    </div>
}

@section scripts {
    <script type="text/javascript">
        $().ready(function () {
            $('#modal-button').on('click', function () {
                $('#test-modal').modal('show');
            });

            $('[data-toggle="tooltip"]').tooltip();
            $('.datetimepicker').datetimepicker();
        });
    </script>
}
